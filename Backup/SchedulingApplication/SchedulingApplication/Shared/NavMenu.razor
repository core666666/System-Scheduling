@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject ILogger<NavMenu> Logger
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <Authorized Context="authContext">
        @{
            Logger.LogInformation($"NavMenu Authorized Context - User: {authContext.User?.Identity?.Name}, IsAuthenticated: {authContext.User?.Identity?.IsAuthenticated}");
        }
        <div class="top-row ps-3 navbar navbar-dark">
            <div class="container-fluid">
                <a class="navbar-brand" href="dashboard">值日排班系统</a>
                <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </div>
        </div>

        <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
            <nav class="flex-column">
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="dashboard" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door" aria-hidden="true"></span> 仪表板
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="staff">
                        <span class="bi bi-people" aria-hidden="true"></span> 人员管理
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="schedule">
                        <span class="bi bi-calendar3" aria-hidden="true"></span> 排班管理
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="notifications">
                        <span class="bi bi-bell" aria-hidden="true"></span> 通知设置
                    </NavLink>
                </div>
            </nav>
        </div>
    </Authorized>
    <NotAuthorized>
        @{
            Logger.LogWarning("NavMenu NotAuthorized Context - User not authenticated");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool collapseNavMenu = false;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        Logger.LogInformation("NavMenu OnInitialized");
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("NavMenu OnInitializedAsync - Starting");
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        Logger.LogInformation($"NavMenu OnInitializedAsync - Auth State: User={authState.User?.Identity?.Name}, IsAuthenticated={authState.User?.Identity?.IsAuthenticated}");
    }

    protected override void OnParametersSet()
    {
        Logger.LogInformation("NavMenu OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("NavMenu OnAfterRenderAsync - First Render");
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            Logger.LogInformation($"NavMenu OnAfterRenderAsync - Auth State: User={authState.User?.Identity?.Name}, IsAuthenticated={authState.User?.Identity?.IsAuthenticated}");
        }
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Logger.LogInformation($"NavMenu HandleLocationChanged - Navigation to: {e.Location}");
        InvokeAsync(async () =>
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            Logger.LogInformation($"NavMenu HandleLocationChanged - Auth State: User={authState.User?.Identity?.Name}, IsAuthenticated={authState.User?.Identity?.IsAuthenticated}");
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Logger.LogInformation("NavMenu Dispose");
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private void ToggleNavMenu()
    {
        Logger.LogInformation($"NavMenu ToggleNavMenu - Toggling menu state from {collapseNavMenu} to {!collapseNavMenu}");
        collapseNavMenu = !collapseNavMenu;
        StateHasChanged();
    }
} 