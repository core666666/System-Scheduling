@page "/dashboard"
@attribute [Authorize]
@using SchedulingApplication.Data
@using SchedulingApplication.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider

<div class="welcome-section mb-4">
    <div class="card">
        <div class="card-body">
            <div class="welcome-message">
                <i class="fas fa-hand-peace welcome-icon"></i>
                <div>
                    <h4 class="greeting">@GetTimeBasedGreeting()，@GetUsername()！</h4>
                    <p class="text-muted">欢迎使用值日排班系统，祝您工作愉快。</p>
                </div>
            </div>
        </div>
    </div>
</div>

<h3>值日排班系统仪表板</h3>

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                今日值班人员
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">加载中...</span>
                    </div>
                }
                else if (todaySchedule == null || todaySchedule.StaffId == null)
                {
                    <p>暂无安排</p>
                }
                else
                {
                    <div class="today-duty">
                        <div class="duty-staff">
                            <div class="staff-avatar pixel-style pixel-style-2">
                                <i class="fas fa-robot"></i>
                            </div>
                            <div class="staff-info">
                                <h5>@todaySchedule.Staff?.Name</h5>
                                <p>@todaySchedule.Staff?.PhoneNumber</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                通知状态
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">加载中...</span>
                    </div>
                }
                else
                {
                    @if (notificationEnabled)
                    {
                        <p><span class="badge bg-success">已启用</span> 通知服务正常运行中</p>
                    }
                    else
                    {
                        <p><span class="badge bg-secondary">未启用</span> 通知服务已停用</p>
                    }
                }
            </div>
        </div>
    </div>
</div>
@*
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                像素风格头像选项
            </div>
            <div class="card-body">
                <div class="pixel-avatars">
                    <div class="pixel-avatar-option">
                        <div class="staff-avatar pixel-style pixel-style-1">
                            <i class="fas fa-gamepad"></i>
                        </div>
                        <p>游戏风</p>
                    </div>
                    <div class="pixel-avatar-option">
                        <div class="staff-avatar pixel-style pixel-style-2">
                            <i class="fas fa-robot"></i>
                        </div>
                        <p>机器人</p>
                    </div>
                    <div class="pixel-avatar-option">
                        <div class="staff-avatar pixel-style pixel-style-3">
                            <i class="fas fa-cat"></i>
                        </div>
                        <p>猫咪</p>
                    </div>
                    <div class="pixel-avatar-option">
                        <div class="staff-avatar pixel-style pixel-style-4">
                            <i class="fas fa-ghost"></i>
                        </div>
                        <p>幽灵</p>
                    </div>
                    <div class="pixel-avatar-option">
                        <div class="staff-avatar pixel-style pixel-style-5">
                            <i class="fas fa-chess-rook"></i>
                        </div>
                        <p>城堡</p>
                    </div>
                </div>
                <p class="mt-3 text-muted">可以根据个人喜好选择上述像素风格头像替换默认头像。</p>
            </div>
        </div>
    </div>
</div>*@

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                快速导航
            </div>
            <div class="card-body">
                <div class="list-group">
                    <a href="/staff" class="list-group-item list-group-item-action">人员管理</a>
                    <a href="/schedule" class="list-group-item list-group-item-action">排班管理</a>
                    <a href="/notifications" class="list-group-item list-group-item-action">通知设置</a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .today-duty {
        padding: 0.5rem;
    }
    
    .duty-staff {
        display: flex;
        align-items: center;
    }
    
    /* 欢迎部分样式 */
    .welcome-section {
        margin-top: 0.5rem;
    }
    
    .welcome-message {
        display: flex;
        align-items: center;
    }
    
    .welcome-icon {
        font-size: 2.5rem;
        color: #3a0647;
        margin-right: 1.5rem;
    }
    
    .greeting {
        font-weight: 600;
        color: #333;
        margin-bottom: 0.5rem;
    }
    
    .staff-avatar {
        width: 3rem;
        height: 3rem;
        background-color: #e0e0e0;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
    }
    
    .staff-avatar i {
        font-size: 1.5rem;
        color: #555;
    }
    
    /* 像素风格头像样式 */
    .pixel-avatars {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
    }
    
    .pixel-avatar-option {
        text-align: center;
    }
    
    .pixel-avatar-option p {
        margin-top: 0.5rem;
        margin-bottom: 0;
        font-size: 0.9rem;
    }
    
    .pixel-style {
        width: 4rem;
        height: 4rem;
        border-radius: 8px !important;
    }
    
    .pixel-style i {
        font-size: 2rem;
    }
    
    .pixel-style-1 {
        background-color: #4834d4;
        border: 3px solid #130f40;
    }
    
    .pixel-style-1 i {
        color: #dff9fb;
    }
    
    .pixel-style-2 {
        background-color: #22a6b3;
        border: 3px solid #0a3d62;
    }
    
    .pixel-style-2 i {
        color: #f0f0f0;
    }
    
    .pixel-style-3 {
        background-color: #f0932b;
        border: 3px solid #6D214F;
    }
    
    .pixel-style-3 i {
        color: #2C3A47;
    }
    
    .pixel-style-4 {
        background-color: #A3CB38;
        border: 3px solid #1B1464;
    }
    
    .pixel-style-4 i {
        color: #ffffff;
    }
    
    .pixel-style-5 {
        background-color: #eb4d4b;
        border: 3px solid #535c68;
    }
    
    .pixel-style-5 i {
        color: #ffdf00;
    }
    
    .staff-info h5 {
        margin-bottom: 0.25rem;
    }
    
    .staff-info p {
        margin-bottom: 0;
        color: #555;
    }
</style>

@code {
    private bool isLoading = true;
    private Models.Schedule todaySchedule;
    private bool notificationEnabled = false;
    private string username;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
        await GetUserInformation();
    }

    private async Task GetUserInformation()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        username = authState.User?.Identity?.Name;
    }

    private string GetUsername()
    {
        return username ?? "用户";
    }

    private string GetTimeBasedGreeting()
    {
        var currentHour = DateTime.Now.Hour;
        
        if (currentHour >= 5 && currentHour < 12)
            return "上午好";
        else if (currentHour >= 12 && currentHour < 18)
            return "下午好";
        else
            return "晚上好";
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        
        try
        {
            // 加载今日值班人员
            var today = DateTime.Today;
            todaySchedule = await DbContext.Schedules
                .Include(s => s.Staff)
                .FirstOrDefaultAsync(s => s.Date.Date == today);
            
            // 加载通知配置状态
            var notificationConfig = await DbContext.NotificationConfigs.FirstOrDefaultAsync();
            if (notificationConfig != null)
            {
                notificationEnabled = notificationConfig.IsEnabled;
            }
        }
        catch (Exception)
        {
            // 处理异常
        }
        
        isLoading = false;
    }
} 