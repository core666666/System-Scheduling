@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject SchedulingApplication.Services.AuthService AuthService
@inject ILogger<MainLayout> Logger
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <Authorized Context="authContext">
        @{
            Logger.LogInformation($"MainLayout Authorized Context - User: {authContext.User?.Identity?.Name}, IsAuthenticated: {authContext.User?.Identity?.IsAuthenticated}");
        }
        <div class="page">
            <div class="sidebar">
                <NavMenu />
            </div>

            <main>
                <div class="top-row px-4">
                    <div class="ms-auto d-flex align-items-center">
                        <div class="user-info me-3">
                            <i class="fas fa-user-circle me-2"></i>
                            <span>@authContext.User?.Identity?.Name</span>
                        </div>
                        <button class="btn btn-logout" @onclick="HandleLogout">
                            <i class="fas fa-sign-out-alt me-1"></i>
                            退出登录
                        </button>
                    </div>
                </div>

                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>
    </Authorized>
    <NotAuthorized>
        @{
            Logger.LogWarning("MainLayout NotAuthorized Context - User not authenticated");
        }
        <div class="page">
            <main>
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>
    </NotAuthorized>
</AuthorizeView>

<style>
    /* 顶部导航栏样式优化 */
    main .top-row {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(0, 0, 0, 0.08);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        padding: 0.75rem 1.5rem;
        position: sticky;
        top: 0;
        z-index: 10;
    }
    
    .user-info {
        display: flex;
        align-items: center;
        font-size: 0.9rem;
        color: #333;
        padding: 0.4rem 0.9rem;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 25px;
        border: 1px solid rgba(0, 0, 0, 0.08);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
    }
    
    .user-info:hover {
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transform: translateY(-2px);
    }
    
    .user-info i {
        color: #3a0647;
        font-size: 1.2rem;
    }
    
    .btn-logout {
        color: #fff;
        background: linear-gradient(135deg, #05275c 0%, #3a0647 100%);
        border: none;
        border-radius: 25px;
        padding: 0.4rem 1rem;
        font-size: 0.9rem;
        font-weight: 500;
        display: flex;
        align-items: center;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }
    
    .btn-logout:hover {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        transform: translateY(-2px);
        background: linear-gradient(135deg, #05275c 20%, #3a0647 80%);
        color: #fff;
    }
    
    article.content {
        padding-top: 1.5rem;
        background-color: #f9f9fb;
    }
</style>

@code {
    protected override void OnInitialized()
    {
        Logger.LogInformation($"MainLayout OnInitialized - Route: {NavigationManager.Uri}");
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("MainLayout OnInitializedAsync - Starting");
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        Logger.LogInformation($"MainLayout OnInitializedAsync - Auth State: User={authState.User?.Identity?.Name}, IsAuthenticated={authState.User?.Identity?.IsAuthenticated}");
    }

    protected override void OnParametersSet()
    {
        Logger.LogInformation("MainLayout OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("MainLayout OnAfterRenderAsync - First Render");
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            Logger.LogInformation($"MainLayout OnAfterRenderAsync - Auth State: User={authState.User?.Identity?.Name}, IsAuthenticated={authState.User?.Identity?.IsAuthenticated}");
        }
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Logger.LogInformation($"MainLayout HandleLocationChanged - Navigation to: {e.Location}");
        InvokeAsync(async () =>
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            Logger.LogInformation($"MainLayout HandleLocationChanged - Auth State: User={authState.User?.Identity?.Name}, IsAuthenticated={authState.User?.Identity?.IsAuthenticated}");
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Logger.LogInformation("MainLayout Dispose");
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task HandleLogout()
    {
        Logger.LogInformation("MainLayout HandleLogout - Starting logout process");
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }
} 