@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject SchedulingApplication.Services.AuthService AuthService
@inject ILogger<MainLayout> Logger
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <Authorized Context="authContext">
        @{
            Logger.LogInformation($"MainLayout Authorized Context - User: {authContext.User?.Identity?.Name}, IsAuthenticated: {authContext.User?.Identity?.IsAuthenticated}");
        }
        <div class="page">
            <div class="sidebar">
                <NavMenu />
            </div>

            <main>
                <div class="top-row px-4">
                    <div class="ms-auto d-flex align-items-center">
                        <div class="user-menu">
                            <div class="user-dropdown" @onclick="ToggleUserMenu" @onclick:stopPropagation>
                                <i class="fas fa-user-circle me-2"></i>
                                <span>@authContext.User.Identity?.Name</span>
                                <i class="fas fa-chevron-down ms-2"></i>
                            </div>
                            @if (showUserMenu)
                            {
                                <div class="user-dropdown-menu" @onclick:stopPropagation>
                                    <div class="dropdown-item" @onclick="ShowChangePasswordModal">
                                        <i class="fas fa-key me-2"></i> 修改密码
                                    </div>
                                    <div class="dropdown-item" @onclick="HandleLogout">
                                        <i class="fas fa-sign-out-alt me-2"></i> 退出登录
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <article class="content px-4">
                    @Body
                    <footer class="main-footer">
                        <div class="footer-content">
                            <div class="copyright">
                                <small>&copy; @DateTime.Now.Year 值日排班系统</small>
                            </div>
                            <div class="powered-by">
                                <small>由.NET 7 Razor技术驱动 © 数字化中心-张三</small>
                            </div>
                        </div>
                    </footer>
                </article>
            </main>
        </div>
    </Authorized>
    <NotAuthorized>
        @{
            Logger.LogWarning("MainLayout NotAuthorized Context - User not authenticated");
        }
        <div class="page">
            <main>
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>
    </NotAuthorized>
</AuthorizeView>

@if (showChangePasswordModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">修改密码</h5>
                    <button type="button" class="btn-close" @onclick="CloseChangePasswordModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">当前密码</label>
                        <input type="password" class="form-control" @bind="currentPassword" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">新密码</label>
                        <input type="password" class="form-control" @bind="newPassword" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">确认新密码</label>
                        <input type="password" class="form-control" @bind="confirmPassword" />
                    </div>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseChangePasswordModal">取消</button>
                    <button type="button" class="btn btn-primary" @onclick="ChangePassword">确认修改</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showSuccessMessage)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body text-center p-4">
                    <i class="fas fa-check-circle text-success" style="font-size: 3rem;"></i>
                    <h5 class="mt-3">@successMessage</h5>
                </div>
            </div>
        </div>
    </div>
}

<style>
    /* 顶部导航栏样式优化 */
    main .top-row {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(0, 0, 0, 0.08);
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        padding: 0.75rem 1.5rem;
        position: sticky;
        top: 0;
        z-index: 10;
    }
    
    .user-menu {
        position: relative;
    }
    
    .user-dropdown {
        display: flex;
        align-items: center;
        font-size: 0.9rem;
        color: #333;
        padding: 0.4rem 0.9rem;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 25px;
        border: 1px solid rgba(0, 0, 0, 0.08);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .user-dropdown:hover {
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transform: translateY(-2px);
    }
    
    .user-dropdown i {
        color: #3a0647;
        font-size: 1.2rem;
    }
    
    .user-dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        margin-top: 0.5rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        min-width: 200px;
        z-index: 1000;
    }
    
    .dropdown-item {
        padding: 0.75rem 1rem;
        display: flex;
        align-items: center;
        color: #333;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .dropdown-item:hover {
        background: rgba(58, 6, 71, 0.05);
        color: #3a0647;
    }
    
    .dropdown-item i {
        color: #3a0647;
        margin-right: 0.5rem;
    }
    
    article.content {
        padding-top: 1.5rem;
        background-color: #f9f9fb;
    }
    
    /* 页脚样式 */
    .main-footer {
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        text-align: center;
    }
    
    .footer-content {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        color: #666;
    }
    
    .footer-content small {
        font-size: 0.85rem;
    }
    
    .copyright {
        opacity: 0.8;
    }
    
    .powered-by {
        color: #3a0647;
        font-weight: 500;
    }
    
    @@media (max-width: 640px) {
        .main-footer {
            margin-top: 1.5rem;
            padding: 1rem 0;
        }
    }
</style>

@code {
    private bool showUserMenu = false;
    private bool showChangePasswordModal = false;
    private bool showSuccessMessage = false;
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";
    private string errorMessage = "";
    private string successMessage = "";

    protected override void OnInitialized()
    {
        Logger.LogInformation($"MainLayout OnInitialized - Route: {NavigationManager.Uri}");
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("MainLayout OnInitializedAsync - Starting");
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        Logger.LogInformation($"MainLayout OnInitializedAsync - Auth State: User={authState.User?.Identity?.Name}, IsAuthenticated={authState.User?.Identity?.IsAuthenticated}");
    }

    protected override void OnParametersSet()
    {
        Logger.LogInformation("MainLayout OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("MainLayout OnAfterRenderAsync - First Render");
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            Logger.LogInformation($"MainLayout OnAfterRenderAsync - Auth State: User={authState.User?.Identity?.Name}, IsAuthenticated={authState.User?.Identity?.IsAuthenticated}");
        }
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Logger.LogInformation($"MainLayout HandleLocationChanged - Navigation to: {e.Location}");
        InvokeAsync(async () =>
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            Logger.LogInformation($"MainLayout HandleLocationChanged - Auth State: User={authState.User?.Identity?.Name}, IsAuthenticated={authState.User?.Identity?.IsAuthenticated}");
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Logger.LogInformation("MainLayout Dispose");
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task HandleLogout()
    {
        Logger.LogInformation("MainLayout HandleLogout - Starting logout process");
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private void ShowChangePasswordModal()
    {
        showChangePasswordModal = true;
        showUserMenu = false;
        currentPassword = "";
        newPassword = "";
        confirmPassword = "";
        errorMessage = "";
    }

    private void CloseChangePasswordModal()
    {
        showChangePasswordModal = false;
        currentPassword = "";
        newPassword = "";
        confirmPassword = "";
        errorMessage = "";
    }

    private async Task ChangePassword()
    {
        if (string.IsNullOrEmpty(currentPassword) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(confirmPassword))
        {
            errorMessage = "请填写所有密码字段";
            return;
        }

        if (newPassword != confirmPassword)
        {
            errorMessage = "新密码与确认密码不匹配";
            return;
        }

        if (newPassword.Length < 6)
        {
            errorMessage = "新密码长度不能少于6个字符";
            return;
        }

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity?.Name;

        if (string.IsNullOrEmpty(username))
        {
            errorMessage = "无法获取当前用户信息";
            return;
        }

        var result = await AuthService.ChangePasswordAsync(username, currentPassword, newPassword);

        if (result)
        {
            showChangePasswordModal = false;
            showSuccessMessage = true;
            successMessage = "密码修改成功，正在跳转到登录页...";
            StateHasChanged();
            
            // 1秒后跳转到登录页
            await Task.Delay(1000);
            await AuthService.LogoutAsync();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            errorMessage = "当前密码错误或修改密码失败";
        }
    }
} 