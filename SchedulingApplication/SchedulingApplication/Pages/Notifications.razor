@page "/notifications"
@using SchedulingApplication.Data
@using SchedulingApplication.Models
@using Microsoft.EntityFrameworkCore
@using SchedulingApplication.Services
@using Microsoft.Extensions.Logging
@inject ApplicationDbContext DbContext
@inject IDingTalkService DingTalkService
@inject ILogger<Notifications> _logger
@attribute [Authorize]

<h3>通知配置</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title mb-3">钉钉通知设置</h5>
                
                @if (isLoading)
                {
                    <div class="text-center py-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">加载中...</span>
                        </div>
                        <p class="mt-2">加载配置中...</p>
                    </div>
                }
                else
                {
                    <EditForm Model="@notificationConfig" OnValidSubmit="SaveConfig">
                        <DataAnnotationsValidator />
                        
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="isEnabled" @bind="notificationConfig.IsEnabled">
                            <label class="form-check-label" for="isEnabled">启用通知</label>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">通知时间</label>
                            <div class="input-group">
                                <input type="number" class="form-control" min="0" max="23" @bind="notificationConfig.NotificationHour" />
                                <span class="input-group-text">时</span>
                                <input type="number" class="form-control" min="0" max="59" @bind="notificationConfig.NotificationMinute" />
                                <span class="input-group-text">分</span>
                            </div>
                            <div class="form-text">设置每天发送通知的时间</div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">通知提前天数</label>
                            <select class="form-select" @bind="notificationConfig.AdvanceDays">
                                <option value="1">提前1天通知</option>
                                <option value="2">提前2天通知</option>
                                <option value="3">提前3天通知</option>
                                <option value="7">提前一周通知</option>
                            </select>
                            <div class="form-text">设置提前多少天通知值班人员</div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">通知内容模板</label>
                            <textarea class="form-control" rows="3" @bind="notificationConfig.NotificationTemplate"></textarea>
                            <div class="form-text">
                                可以使用以下变量：<br />
                                {Name} - 值班人员姓名<br />
                                {Date} - 值班日期<br />
                                {DayOfWeek} - 星期几
                            </div>
                            <div class="form-text mt-2">
                                支持Markdown格式和HTML标签，如:<br />
                                # 标题, ## 二级标题<br />
                                **粗体**, *斜体*<br />
                                ---: 分隔线<br />
                                <font color='blue'>彩色文字</font>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label d-flex justify-content-between">
                                <span>预览效果</span>
                                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="PreviewNotification">刷新预览</button>
                            </label>
                            <div class="card">
                                <div class="card-body bg-light preview-area">
                                    @((MarkupString)previewContent)
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-primary">
                                <i class="oi oi-check me-1"></i> 保存配置
                            </button>
                            
                            <div>
                                <div class="input-group mb-2">
                                    <label class="input-group-text" for="selectedStaffId">测试接收人</label>
                                    <select class="form-select" id="selectedStaffId" @bind="selectedStaffId">
                                        @if (staffList == null || !staffList.Any())
                                        {
                                            <option value="">无可选人员</option>
                                        }
                                        else
                                        {
                                            @foreach (var staff in staffList)
                                            {
                                                <option value="@staff.Id">@staff.Name (@staff.PhoneNumber)</option>
                                            }
                                        }
                                    </select>
                                </div>
                                
                                <button type="button" class="btn btn-outline-success w-100" @onclick="SendTestNotification" disabled="@(staffList == null || !staffList.Any())">
                                    <i class="oi oi-envelope-closed me-1"></i> 发送测试通知
                                </button>
                            </div>
                        </div>
                    </EditForm>
                    
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3">
                            <i class="oi @(isError ? "oi-warning" : "oi-check") me-2"></i>
                            @message
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title mb-3">当前通知状态</h5>
                
                <div class="status-info">
                    <div class="status-item">
                        <div class="status-label">通知状态</div>
                        <div class="status-value">
                            @if (notificationConfig?.IsEnabled == true)
                            {
                                <span class="badge bg-success">已启用</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">已禁用</span>
                            }
                        </div>
                    </div>
                    
                    <div class="status-item">
                        <div class="status-label">通知时间</div>
                        <div class="status-value">
                            @(notificationConfig != null ? $"每天 {notificationConfig.NotificationHour:D2}:{notificationConfig.NotificationMinute:D2}" : "-")
                        </div>
                    </div>
                    
                    <div class="status-item">
                        <div class="status-label">提前天数</div>
                        <div class="status-value">
                            @(notificationConfig != null ? $"提前 {notificationConfig.AdvanceDays} 天" : "-")
                        </div>
                    </div>
                    
                    <div class="status-item">
                        <div class="status-label">下次通知时间</div>
                        <div class="status-value">
                            @(GetNextNotificationTime())
                        </div>
                    </div>
                    
                    <div class="status-item">
                        <div class="status-label">通知发送对象</div>
                        <div class="status-value">
                            @(GetNextNotificationTarget())
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card mt-3">
            <div class="card-body">
                <h5 class="card-title mb-3">通知记录</h5>
                
                <div class="notification-logs">
                    <div class="alert alert-info">
                        <i class="oi oi-info me-2"></i>
                        暂无通知记录
                    </div>
                    
                    <!-- 这里可以添加通知日志列表 -->
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .status-info {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }
    
    .status-item {
        display: flex;
        border-bottom: 1px solid #eee;
        padding-bottom: 10px;
    }
    
    .status-label {
        font-weight: 500;
        color: #555;
        width: 120px;
    }
    
    .status-value {
        flex: 1;
    }
    
    .preview-area {
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        padding: 15px;
        background-color: #fcfcfc;
        min-height: 200px;
        max-height: 400px;
        overflow-y: auto;
    }
    
    .preview-area h1 {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
    }
    
    .preview-area h2 {
        font-size: 1.3rem;
        margin-bottom: 0.5rem;
    }
    
    .preview-area hr {
        margin: 0.75rem 0;
    }
</style>

@code {
    private NotificationConfig notificationConfig;
    private bool isLoading = true;
    private string message;
    private bool isError;
    private List<Models.Staff> staffList;
    private int selectedStaffId;
    private string previewContent = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadConfig();
        await LoadStaffList();
        await PreviewNotification();
    }

    private async Task LoadConfig()
    {
        isLoading = true;
        message = null;
        
        // 从数据库加载配置
        notificationConfig = await DbContext.NotificationConfigs.FirstOrDefaultAsync();
        
        // 如果没有找到配置，创建默认配置
        if (notificationConfig == null)
        {
            notificationConfig = new NotificationConfig
            {
                IsEnabled = true,
                NotificationHour = 17,
                NotificationMinute = 0,
                AdvanceDays = 1,
                NotificationTemplate = "尊敬的{Name}，提醒您明天({Date} {DayOfWeek})将由您值班，请做好准备。"
            };
            
            DbContext.NotificationConfigs.Add(notificationConfig);
            await DbContext.SaveChangesAsync();
        }
        
        isLoading = false;
    }

    private async Task LoadStaffList()
    {
        staffList = await DbContext.Staff.ToListAsync();
        
        if (staffList != null && staffList.Any())
        {
            selectedStaffId = staffList.First().Id;
        }
    }

    private async Task SaveConfig()
    {
        try
        {
            DbContext.NotificationConfigs.Update(notificationConfig);
            await DbContext.SaveChangesAsync();
            
            message = "配置已成功保存";
            isError = false;
            
            // 保存后刷新预览
            await PreviewNotification();
        }
        catch (Exception ex)
        {
            message = $"保存配置失败: {ex.Message}";
            isError = true;
        }
    }

    private async Task SendTestNotification()
    {
        try
        {
            // 获取选中的员工
            var staff = await DbContext.Staff.FirstOrDefaultAsync(s => s.Id == selectedStaffId);
            
            if (staff == null)
            {
                message = "未找到所选人员，请重新选择";
                isError = true;
                return;
            }
            
            // 构建通知内容
            var template = notificationConfig.NotificationTemplate;
            var tomorrow = DateTime.Today.AddDays(1);
            var dayOfWeek = GetChineseDayOfWeek(tomorrow.DayOfWeek);
            
            var content = template
                .Replace("{Name}", staff.Name)
                .Replace("{Date}", tomorrow.ToString("yyyy-MM-dd"))
                .Replace("{DayOfWeek}", dayOfWeek);
            
            // 发送钉钉通知
            await DingTalkService.SendNotificationAsync(staff.PhoneNumber, content);
            
            message = $"已成功发送测试通知到 {staff.Name} ({staff.PhoneNumber})";
            isError = false;
        }
        catch (Exception ex)
        {
            message = $"发送测试通知失败: {ex.Message}";
            isError = true;
            _logger.LogError(ex, "发送测试通知失败");
        }
    }

    private string GetNextNotificationTime()
    {
        if (notificationConfig == null || !notificationConfig.IsEnabled)
            return "通知已禁用";
            
        var now = DateTime.Now;
        var nextNotification = new DateTime(
            now.Year, now.Month, now.Day,
            notificationConfig.NotificationHour,
            notificationConfig.NotificationMinute,
            0
        );
        
        if (nextNotification < now)
            nextNotification = nextNotification.AddDays(1);
            
        return nextNotification.ToString("yyyy-MM-dd HH:mm:ss");
    }

    private string GetNextNotificationTarget()
    {
        if (notificationConfig == null || !notificationConfig.IsEnabled)
            return "通知已禁用";
            
        var targetDate = DateTime.Today.AddDays(notificationConfig.AdvanceDays);
        return $"{targetDate.ToString("yyyy-MM-dd")} ({GetChineseDayOfWeek(targetDate.DayOfWeek)}) 的值班人员";
    }

    private string GetChineseDayOfWeek(DayOfWeek dayOfWeek)
    {
        switch (dayOfWeek)
        {
            case DayOfWeek.Monday: return "星期一";
            case DayOfWeek.Tuesday: return "星期二";
            case DayOfWeek.Wednesday: return "星期三";
            case DayOfWeek.Thursday: return "星期四";
            case DayOfWeek.Friday: return "星期五";
            case DayOfWeek.Saturday: return "星期六";
            case DayOfWeek.Sunday: return "星期日";
            default: return "";
        }
    }

    private async Task PreviewNotification()
    {
        if (notificationConfig == null) return;
        
        try
        {
            // 获取一个示例员工，或创建一个假的用于预览
            var sampleStaff = staffList?.FirstOrDefault() ?? new Models.Staff { Name = "张三" };
            
            // 构建预览内容
            var template = notificationConfig.NotificationTemplate;
            var tomorrow = DateTime.Today.AddDays(1);
            var dayOfWeek = GetChineseDayOfWeek(tomorrow.DayOfWeek);
            
            var content = template
                .Replace("{Name}", sampleStaff.Name)
                .Replace("{Date}", tomorrow.ToString("yyyy-MM-dd"))
                .Replace("{DayOfWeek}", dayOfWeek);
                
            // 简单的Markdown转HTML转换（实际项目中可能需要使用专门的库）
            // 这里简单替换一些基本的Markdown语法
            previewContent = content
                .Replace("\n", "<br/>")
                .Replace("# ", "<h1>").Replace("\n<h1>", "</h1><h1>")
                .Replace("## ", "<h2>").Replace("\n<h2>", "</h2><h2>")
                .Replace("**", "<strong>")
                .Replace("*", "<em>")
                .Replace("---", "<hr>");
                
            // 如果是空预览，显示提示信息
            if (string.IsNullOrWhiteSpace(previewContent))
            {
                previewContent = "<em>预览区域 - 编辑模板后可在此处查看效果</em>";
            }
        }
        catch (Exception ex)
        {
            previewContent = $"<span class='text-danger'>预览生成失败: {ex.Message}</span>";
        }
    }
} 